name: Release

on:
  push:
  pull_request:
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x
        
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
      
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch
          
    # Update references
    - name: Git Sumbodule Update
      run: |
        git config --global user.email "polinetwork@outlook.com"
        git config --global user.name "PoliNetwork"
        git config --global pull.rebase false --allow-unrelated-histories
        git pull origin   ${{ steps.extract_branch.outputs.branch }} --recurse-submodules --allow-unrelated-histories
        git submodule update --remote --recursive  
          
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
      
  Release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
          
    # Update references
    - name: Git Sumbodule Update
      run: |
        git config --global user.email "polinetwork@outlook.com"
        git config --global user.name "PoliNetwork"
        git config --global pull.rebase false --allow-unrelated-histories
        git pull origin   ${{ steps.extract_branch.outputs.branch }} --recurse-submodules --allow-unrelated-histories
        git submodule update --remote --recursive  
          
    - name: Restore dependencies
      run: dotnet restore
      working-directory: PoliNetworkBot_CSharp
      
    - name: Publish
      run: |
        dotnet publish --no-restore -o dist
        TZ='Europe/Rome' date > ./static/build-date.txt
      working-directory: PoliNetworkBot_CSharp
    
    - name: Git management
      run: |
        cd /home/runner/work/PoliNetworkBot_CSharp/PoliNetworkBot_CSharp/PoliNetworkBot_CSharp/dist/
        cp -r ../static/ ./static
        git init
        git remote add origin https://git:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
        git add  .
        git status
        git config --global user.email "actions@github.com"
        git config --global user.name "Github Action"
        git commit -m "artifact"
        git switch -c release
        git push origin release -f


